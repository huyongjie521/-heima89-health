<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
        配置匿名访问路径：表示不需要经过权限控制就能直接访问的url
    -->
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/favicon.ico"></security:http>
    <security:http security="none" pattern="/login.html"></security:http>
    <!--
        http标签：用来配置权限控制
        auto-config属性：true，表示使用security框架提供的自动化配置，登陆页面，登出等功能
        use-expressions：是否使用表达式配置权限
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--
            intercept-url标签：配置具体的权限控制规则
            pattern属性：表示对那些url进行拦截控制,/**拦截所有请求
            access属性：表示对pattern限制的url必须拥有什么样的 权限才能访问
                hasRole('ROLE_ADMIN')：必拥有ROLE_ADMIN的角色才能去访问被pattern的url
        -->
<!--        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->

        <security:intercept-url pattern="/a.html" access="isAuthenticated()"></security:intercept-url>
        <security:intercept-url pattern="/b.html" access="hasAuthority('add')"></security:intercept-url>
        <security:intercept-url pattern="/c.html" access="hasAnyRole('ROLE_MANAGER','ADMIN')"></security:intercept-url>
<!--        <security:intercept-url pattern="/d.html" access="hasRole('ADMIN')"></security:intercept-url>-->


        <!--配置自定义登陆页面
            login-page:使用哪个页面作为登陆页面
            login-processing-url:提交登陆时，发送的url
            username-parameter:登陆的用户
            password-parameter：登陆的密码
            default-target-url:登陆成功之后默认跳转的url
            authentication-failure-url：登陆失败跳转的url
            always-use-default-target：是否总是使用默认跳转的url
        -->
        <security:form-login login-page="/login.html"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"></security:form-login>
        <!--关闭跨站点请求伪装过滤器-->
        <security:csrf disabled="true"></security:csrf>

        <!--配置登出操作
            logout-url:退出登陆的url
            logout-success-url:退出成功后，跳转的url
            invalidate-session:清空
        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>
    </security:http>

    <!--配置认证管理器:用来执行认证业务操作的-->
    <!--<security:authentication-manager>
        &lt;!&ndash;
            认证提供者：执行具体的认证逻辑
        &ndash;&gt;
        <security:authentication-provider>
            &lt;!&ndash;
                认证服务：用来获取具体的用户信息，给认证提供者进行具体的认证逻辑
            &ndash;&gt;
            <security:user-service>
                &lt;!&ndash;
                    配置用户信息
                    name属性：登陆用户的用户名
                    password属性：登陆用户的密码，{noop}表示该密码没有被加密过，是明文密码
                    authorities属性：配置了具体的角色ROLE_ADMIN
                &ndash;&gt;
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"></security:user>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->
    <!--
        配置使用自定义的认证任务类
    -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>


    <context:component-scan base-package="com.itheima"></context:component-scan>

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>

    <!--声明使用注解配置security权限-->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>

</beans>